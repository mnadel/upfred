#!/usr/bin/env python3

import os
import sys
import json
import logging
import argparse
from os import listdir
from os.path import basename, isfile, join, dirname

logger = logging.getLogger(__name__)
logging.basicConfig(stream=sys.stderr,
    level=logging.DEBUG if os.getenv("DEBUG") else logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

def find(name, top):
    # given a file name, find its full path within the top directory
    for root, _, files in os.walk(top):
        if name in files:
            return os.path.join(root, name)

def subtitle(f, uuid):
    # `notebooks` contains links to uuid.md files organized by
    # notebook hierarchy, we use this to infer the notebook name
    basedir = dirname(f)
    logging.debug(f"basedir: {basedir}")

    fullbase = join(basedir, "notebooks")
    logging.debug(f"fullbase: {fullbase}")

    path = find(f"{uuid}.md", fullbase)
    logging.debug(f"path: {path}")
    if not path:
        return None

    # add trailing sep so removeprefix works
    return dirname(path.removeprefix(fullbase + os.path.sep))

def title(buffer):
    # it's a markdown file, first line contains title eg: `# Title\n`
    space = buffer.find(" ")
    newline = buffer.find("\n")
    return buffer[space+1:newline].strip()

def result(f, buffer):
    base = basename(f)
    uuid = base[:-3] # remove .md

    return {
        "title": title(buffer),
        "subtitle": subtitle(f, uuid),
        "arg": uuid
    }

parser = argparse.ArgumentParser(prog=basename(sys.argv[0]), description="alfred+upnote integration")
parser.add_argument("-d", "--dir", required=True, help="upnote backup path")
parser.add_argument("search", nargs="+", help="search term")

args = parser.parse_args()

dirs = [join(args.dir, f) for f in listdir(args.dir) if not isfile(join(args.dir, f))]
stats = map(lambda d: (os.stat(d).st_mtime, d), dirs)
by_mtime = sorted(stats, key=lambda x: x[0], reverse=True)
latest = join(by_mtime[0][1], "Markdown", "General Space")
notes = [join(latest, f) for f in listdir(latest) if f.lower().endswith(".md")]

results = []
terms = [x.strip() for x in " ".join(args.search).split(" ") if len(x.strip()) > 0]

for f in notes:
    with open(f, "r") as file:
        buffer = file.read()
        if all([s.lower() in buffer.lower() for s in terms]):
            results.append(result(f, buffer))

if not results or len(results) < 1:
    title = " ".join(args.search).title().strip()
    results.append({
        "title": "Create note " + title,
        "arg": "x-upfred-create:" + title
    })
    
print(json.dumps({"items": results}))

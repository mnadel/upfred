#!/usr/bin/env python3

import os
import sys
import json
import mmap
import logging
import argparse
from os import listdir
from os.path import basename, isfile, join, dirname

logger = logging.getLogger(__name__)
logging.basicConfig(stream=sys.stderr,
    level=logging.DEBUG if os.getenv("DEBUG") else logging.ERROR,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

class Reader:
    def __init__(self, mmap, titles):
        self._mmap = mmap
        self._titles = titles

    def read(self, filename):
        buffer = self._read_mmap(filename) if self._mmap else self._read(filename)
        if not self._titles:
            return buffer
        else:
            newline = buffer.find("\n")
            return buffer[:newline].strip()

    def _read(self, filename):
        with open(filename, mode="r", encoding="utf8") as f:
            return f.read().decode("utf8")

    def _read_mmap(self, filename):
        with open(filename, mode="r", encoding="utf8") as f:
            with mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_READ) as o:
                return o.read().decode("utf8")

def find(name, top):
    # given a file name, find its full path within the top directory
    for root, _, files in os.walk(top):
        if name in files:
            return os.path.join(root, name)

def subtitle(f, uuid):
    # `notebooks` contains links to uuid.md files organized by
    # notebook hierarchy, we use this to infer the notebook name
    basedir = dirname(f)
    logging.debug(f"basedir: {basedir}")

    fullbase = join(basedir, "notebooks")
    logging.debug(f"fullbase: {fullbase}")

    path = find(f"{uuid}.md", fullbase)
    logging.debug(f"path: {path}")
    if not path:
        return None

    # add trailing sep so removeprefix works
    return dirname(path.removeprefix(fullbase + os.path.sep))

def title(buffer):
    # it's a markdown file, first line contains title eg: `# Title\n`
    space = buffer.find(" ")
    newline = buffer.find("\n")
    if newline < 0:
        return buffer[space+1:].strip()
    else:
        return buffer[space+1:newline].strip()

def result(f, buffer):
    base = basename(f)
    uuid = base[:-3] # remove .md
    sub = subtitle(f, uuid)

    res = {
        "title": title(buffer),
        "arg": uuid
    }

    if sub:
        res["subtitle"] = sub

    return res

parser = argparse.ArgumentParser(prog=basename(sys.argv[0]), description="alfred+upnote integration")
parser.add_argument("-d", "--dir", required=True, help="upnote backup path")
parser.add_argument("-n", "--no-mmap", action="store_true", help="do not use mmap to read files")
parser.add_argument("-t", "--titles", action="store_true", help="search titles only")
parser.add_argument("search", nargs="+", help="search term")

args = parser.parse_args()

# find the latest backup directory
dirs = [join(args.dir, f) for f in listdir(args.dir) if not isfile(join(args.dir, f))]
stats = map(lambda d: (os.stat(d).st_mtime, d), dirs)
by_mtime = sorted(stats, key=lambda x: x[0], reverse=True)

# drill into $BACKUP/Markdown/General Space
latest = join(by_mtime[0][1], "Markdown", "General Space")

# find all markdown files in the latest backup directory
notes = [join(latest, f) for f in listdir(latest) if f.lower().endswith(".md")]

results = []
terms = [x.strip() for x in " ".join(args.search).split(" ") if len(x.strip()) > 0]

reader = Reader(mmap=not args.no_mmap, titles=args.titles)

for f in notes:
    buffer = reader.read(f)
    if all([s.lower() in buffer.lower() for s in terms]):
        results.append(result(f, buffer))

if not results or len(results) < 1:
    title = " ".join(args.search).title().strip()
    results.append({
        "title": "Create note " + title,
        "arg": "x-upfred-create:" + title
    })
    
print(json.dumps({"items": results}))
